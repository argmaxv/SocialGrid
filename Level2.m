%% 2nd level analysis
% 
% by A PARK 12/28/2017

%% Path setup
clear;
close all;
clc;

[ProjSet, fs, info, ROI, fname]=Call_default_PS;
[subj, nsubj] = CallSubj_PS;
base_path=ProjSet.basepath;               %   The project directory
an_path =ProjSet.ANA1path;                 %  1st level analysis
prefix='z';                                                %  in case zscore transformation is required (F-test results e.g. NoPhi) associated with zscore_nii.m
copyConds = 1;                                      % 1 for collecting evey con files across participants and save it in a 2nd level analysis folder
        
%% Get the information about the 1st level GLM (what the regressors of interests were)

% GLM1
% design_name = 'Grid6_noPhi';
% testtype={'T','T','F'}; %{'T'} for all contrasts were generated by T test; {'T','T','F'} if con_0001 and con_0002 are generated from T test but the third analysis was F test (then choose spmF_000x instead) e.g. GLM1 NoPhi 
% CrossValidationOption= 'NoPhi';             %  Phi across blocks % according to GLM, this can be 'PhixD' or 'NoPhi'
% lvl1folder= [an_path, CrossValidationOption, fs];       %   where the results of 1st level analysis is saved
% lvl2folder= ProjSet.ANA2path;               %  where the results of 2nd level analysis will be saved

% GLM2
design_name = 'Grid_PhixB';
testtype={'T'}; %{'T'} for all contrasts were generated by T test; {'T','T','F'} if con_0001 and con_0002 are generated from T test but the third analysis was F test (then choose spmF_000x instead) e.g. GLM1 NoPhi 
CrossValidationOption= 'PhixB';             %  Phi across blocks % according to GLM, this can be 'PhixD' or 'NoPhi'
gridROI=ROI.Grid{1};
resfolder =[gridROI, '_', CrossValidationOption];
lvl1folder= [an_path, resfolder, fs];       %   where the results of 1st level analysis is saved
lvl2folder= ProjSet.ANA2path;               %  where the results of 2nd level analysis will be saved

glmlv1=dir( fullfile([lvl1folder, design_name], 'GLM*.mat') ); % loading the information about GLM which was saved during the contrast specification in the level 1 analysis.
load ( fullfile(glmlv1.folder, glmlv1.name) );

%% Make 2nd level analysis directories
for icnt=1:length(glmspec.cont) % number of contrasts (regressors of interests which was determined during the 1st level analysis)
    
    if numel(testtype)==1
        whichtest=testtype{1};
    else
        whichtest=testtype{icnt};
    end
    
    if strcmp(whichtest,'T')
        if ~exist([lvl2folder, design_name, fs, 'T test_', gridROI, fs, glmspec.cont{icnt}, fs, 'con', fs],'dir')
                mkdir([lvl2folder, design_name, fs, 'T test_', gridROI, fs, glmspec.cont{icnt}, fs, 'con', fs])
        end    
    end
    if strcmp(whichtest,'F')
        if ~exist([lvl2folder, design_name, fs, 'F test_', gridROI, fs, glmspec.cont{icnt}, fs, 'fcon', fs],'dir')
                mkdir([lvl2folder, design_name, fs, 'F test_', gridROI, fs, glmspec.cont{icnt}, fs, 'fcon', fs])
        end
    end

end

 %% Copy files over to the 2nd level folder
 if copyConds ==1
     for s=1:nsubj
         for icnt=1:length(glmspec.cont)
             
            if numel(testtype)==1 % If testtype='T' or 'F' every analysis are T or F
                whichtest=testtype{1};
            else
                whichtest=testtype{icnt}; % if testtype={'T','T','F'} for example then it indicates that the 1st level analysis was performed T test for the first 2 contrasts then F test.
            end
             
              if strcmp(whichtest,'T') % if T test, choose con_000x.nii and copy it to the 2nd analysis folder with the name subjectID.nii (e.g. F01.nii)
                    clear confile
                    confile=spm_select('List', [lvl1folder,design_name, fs, subj{s}], ['con.*' sprintf('%04d',icnt) '.nii']); % get the name of the original con file 
                    confile=cellstr([repmat([lvl1folder,design_name, fs, subj{s}, fs],size(confile,1),1) confile]); % add path to the confile
                    copyfile(confile{:}, [lvl2folder, design_name, fs, 'T test_', gridROI, fs, glmspec.cont{icnt}, fs 'con', fs, subj{s}, '.nii'], 'f'); % copy the confile to the Lv2 folder renaming with subjectID
                    
              end              
              if strcmp(whichtest,'F') % if F test, choose spmF_000x.nii, zscore it, and copy it to the 2nd analysis folder with the name subjectID.nii (e.g. F01.nii)
                    clear confile
                    confile=spm_select('List', [lvl1folder,design_name, fs, subj{s} ], ['spmF.*' sprintf('%04d',icnt) '.nii']); % get the name of the original con file
                    zscore_nii([lvl1folder,design_name, '/', subj{s} ] ,confile(1,:), prefix); % This function zscore the spmF_000x.nii and generate zF_000x.nii
                    confile=cellstr([repmat([lvl1folder,design_name, fs, subj{s}, fs, prefix],size(confile,1),1) confile(:,4:end)]); % add path to the confile                    
                    copyfile(confile{:}, [lvl2folder, design_name, fs, 'F test_', gridROI, fs, glmspec.cont{icnt}, fs 'con', fs, subj{s}, '.nii'], 'f'); % copy the confile to the Lv2 folder renaming with subjectID (con)
              end         
         end
         
    end
 end   
 
 for icnt=1:length(glmspec.cont)

    if numel(testtype)==1
        whichtest=testtype{1};
    else
        whichtest=testtype{icnt};
    end

    lv2dir=[lvl2folder, design_name, fs, whichtest ' test_', gridROI, fs, glmspec.cont{icnt}, fs];    
    factorial_design.dir = {lv2dir};

    for ss=1:length(subj)
        scans{ss}=fullfile([lv2dir, 'con'], [subj{ss} '.nii']); % 
    end
    factorial_design.des.t1.scans=cellstr(scans)';
    
    factorial_design.cov = struct('c', {}, 'cname', {}, 'iCFI', {}, 'iCC', {});
    factorial_design.multi_cov = struct('files', {}, 'iCFI', {}, 'iCC', {});
    factorial_design.masking.tm.tm_none = 1;
    factorial_design.masking.im = 1;
    factorial_design.masking.em = {''};
    factorial_design.globalc.g_omit = 1;
    factorial_design.globalm.gmsca.gmsca_no = 1;
    factorial_design.globalm.glonorm = 1;
    disp([num2str(icnt), '.  ', glmspec.cont{icnt}]);
    matlabbatch{1}.spm.stats.factorial_design=factorial_design;    
    matlabbatch{2}.spm.stats.fmri_est.spmmat = {[lv2dir, 'SPM.mat']};
    matlabbatch{2}.spm.stats.fmri_est.write_residuals = 0;
    matlabbatch{2}.spm.stats.fmri_est.method.Classical = 1;
    
    con.spmmat = {[lv2dir, 'SPM.mat']};
    tconname={[glmspec.cont{icnt} '_nor'], [glmspec.cont{icnt} '_inv']};
    con.consess{1}.tcon.name = tconname{1}; % positive contrast
    con.consess{1}.tcon.weights = 1;
    con.consess{1}.tcon.sessrep = 'none';
%     con.consess{2}.tcon.name = tconname{2}; % negative contrast
%     con.consess{2}.tcon.weights = -1;
%     con.consess{2}.tcon.sessrep = 'none';
    con.delete = 0;
    matlabbatch{3}.spm.stats.con=con;
    
    results.spmmat ={[lv2dir, 'SPM.mat']};
    for tconN=1:numel(tconname)      
        results.conspec(tconN).titlestr = '';
        results.conspec(tconN).contrasts = tconN;
        results.conspec(tconN).threshdesc = 'none';
        if strcmp(whichtest,'F')
            results.conspec(tconN).thresh = 2.3; %z scored 0.001;
        else
            results.conspec(tconN).thresh = 0.001;
        end
        results.conspec(tconN).extent = 0;
        results.conspec(tconN).conjunction = 1;
        results.conspec(tconN).mask.none = 1;
    end
    results.units = 1;
    results.export{1}.ps = true;
    matlabbatch{4}.spm.stats.results=results;
    
    spm('defaults', 'FMRI');
    spm_jobman('run',matlabbatch);
    clear matlabbatch;
 end
 
